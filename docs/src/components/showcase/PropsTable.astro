---
export interface Props {
  /** Component name to load props for */
  componentName: string
  /** Optional title override */
  title?: string
}

const {componentName, title = 'Props'} = Astro.props

// Load component documentation from generated JSON
let props: any[] = []

try {
  const componentDocsModule = await import('../../generated/component-docs.json')
  const allDocs = componentDocsModule.default as any[]
  const componentDoc = allDocs.find(doc => doc.name === componentName)
  props = componentDoc?.props || []
} catch (error) {
  console.warn(`Failed to load props for ${componentName}:`, error)
}
---

{props.length > 0 ? (
  <div class="props-table-container">
    <h3 class="props-table-title">{title}</h3>
    <div class="props-table-wrapper">
      <table class="props-table">
        <thead>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Required</th>
            <th>Default</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          {props.map((prop) => (
            <tr>
              <td class="prop-name">
                <code>{prop.name}</code>
              </td>
              <td class="prop-type">
                <code class="type-code">{prop.type}</code>
              </td>
              <td class="prop-required">
                {prop.required ? (
                  <span class="required-badge">Required</span>
                ) : (
                  <span class="optional-badge">Optional</span>
                )}
              </td>
              <td class="prop-default">
                {prop.defaultValue ? (
                  <code class="default-code">{prop.defaultValue}</code>
                ) : (
                  <span class="no-default">—</span>
                )}
              </td>
              <td class="prop-description">
                {prop.description || <span class="no-description">—</span>}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  </div>
) : (
  <div class="props-table-empty">
    <p class="text-gray-500 text-sm italic">No props documented for this component.</p>
  </div>
)}

<style>
  .props-table-container {
    @apply space-y-4;
  }

  .props-table-title {
    @apply text-xl font-semibold text-gray-900 dark:text-white;
  }

  .props-table-wrapper {
    @apply overflow-x-auto border border-gray-200 dark:border-gray-700 rounded-lg;
  }

  .props-table {
    @apply w-full text-sm;
  }

  .props-table thead {
    @apply bg-gray-50 dark:bg-gray-800;
  }

  .props-table th {
    @apply px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider;
  }

  .props-table tbody {
    @apply bg-white dark:bg-gray-900 divide-y divide-gray-200 dark:divide-gray-700;
  }

  .props-table td {
    @apply px-6 py-4 whitespace-nowrap;
  }

  .prop-name code {
    @apply font-mono text-sm font-medium text-blue-600 dark:text-blue-400;
  }

  .prop-type {
    @apply max-w-xs;
  }

  .type-code {
    @apply font-mono text-xs text-gray-600 dark:text-gray-300 bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded;
    @apply break-words;
  }

  .required-badge {
    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium;
    @apply bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200;
  }

  .optional-badge {
    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium;
    @apply bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-200;
  }

  .default-code {
    @apply font-mono text-xs text-green-600 dark:text-green-400 bg-green-50 dark:bg-green-900 px-2 py-1 rounded;
  }

  .no-default,
  .no-description {
    @apply text-gray-400 dark:text-gray-500 italic;
  }

  .prop-description {
    @apply text-gray-600 dark:text-gray-300 max-w-md;
  }

  .props-table-empty {
    @apply text-center py-8;
  }
</style>
