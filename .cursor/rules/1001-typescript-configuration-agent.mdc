---
description: IMPLEMENT when CONFIGURING TypeScript in monorepo to ENSURE type safety and build performance
globs:
alwaysApply: false
---
# TypeScript Configuration Best Practices for Monorepos

## Context
- When setting up TypeScript in a monorepo
- When creating or modifying tsconfig.json files
- When configuring package dependencies across the monorepo

## Requirements
- Use TypeScript project references for clean dependencies between packages
- Configure path aliases for simpler imports
- Create a root tsconfig.json with shared compiler options
- Create package-specific tsconfig.json files that extend the root configuration

## Examples
<example>
Root tsconfig.json with shared compiler options:
```json
{
  "compilerOptions": {
    "target": "ES2020",
    "module": "ESNext",
    "moduleResolution": "node",
    "strict": true,
    "esModuleInterop": true,
    "baseUrl": ".",
    "paths": {
      "@repo/ui/*": ["packages/ui/src/*"],
      "@repo/utils/*": ["packages/utils/src/*"]
    }
  }
}
```

Package-specific tsconfig.json:
```json
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "./dist",
    "rootDir": "./src"
  },
  "references": [
    { "path": "../shared-types" }
  ]
}
```
</example>

<example type="invalid">
Incorrect root tsconfig.json without path aliases:
```json
{
  "compilerOptions": {
    "target": "ES2020",
    "strict": false
  }
}
```

Package tsconfig.json without proper references:
```json
{
  "compilerOptions": {
    "outDir": "./dist"
  }
}
```
</example>

## Critical Points
<critical>
  - ALWAYS use project references to define dependencies between packages
  - ALWAYS configure path aliases to simplify imports
  - ENSURE strict type checking is enabled
  - NEVER duplicate compiler options that should be shared across packages
</critical>
