---
description: ALWAYS USE when CREATING or MODIFYING a RULE to ENSURE consistency and efficiency
globs:
alwaysApply: true
---

# Standard Format for Cursor Rules

## Template Structure for Rules Files
```mdc
---
description: ACTION when TRIGGER to OUTCOME
globs: glob/pattern/*.ext
alwaysApply: false
tags: [tag1, tag2, tag3]
priority: 1 {1 (highest) to 5 (lowest)}
---

# Rule Title

## Context
- When to apply this rule
- Prerequisites or conditions

## Requirements
- Concise, actionable items
- Each requirement must be testable

## Examples
<example>
  Good concise example with explanation
</example>

<example type="invalid">
  Invalid concise example with explanation
</example>

## Critical Points
<critical>
  - ALWAYS do X
  - NEVER do Y
  - ENSURE Z
</critical>
```

## Naming Convention
CATEGORY-rule-name-TYPE.mdc where CATEGORY is a number range:
- 0XX: Core standards
- 1XX: Tool configs
- 2XX: Patterns and Roles
- 3XX: Testing standards
- 4XX: Documentation standards
- 8XX: Workflows
- 9XX: Templates
- 1XXX: Language rules
- 2XXX: Framework rules
- _[XXX-]rule-name.mdc: Private rules

TYPE is one of:
- auto: rule applies to all files matching the glob pattern
- agent: rule is selected by the agent based on the description
- manual: rule is manually applied
- always: rule is always applied to every chat and cmd/ctrl-k

<required>
  - Use kebab-case (e.g., api-integration.mdc)
  - Choose the most specific category that applies
  - IMPORTANT: Always use the lowest available number in the appropriate range:
    - If creating the first file in a category, use the first number (e.g., 100 for Tool Configs)
    - If adding to an existing category, use the next sequential number (e.g., if 001 exists, use 002)
</required>

## Glob Pattern Examples
Common glob patterns for different rule types:
- Core standards: .cursor/rules/*.mdc
- Language rules: *.cs, *.cpp
- Testing standards: *.test.ts, *.test.js
- React components: src/components/**/*.tsx
- Documentation: docs/**/*.md, *.md
- Configuration files: *.config.js
- Build artifacts: dist/**/*
- Multiple extensions: *.js, *.ts, *.tsx
- Multiple patterns: dist/**/*.*, docs/**/*.md, *test*.*

## Required Fields

### Frontmatter

- `title`: Descriptive rule title
- `description`: ACTION when TRIGGER to OUTCOME format
- `globs`: Glob pattern for files and folders
- `alwaysApply`: Boolean for unconditional injection
- `tags`: List of tags for categorization
- `priority`: Number from 1 to 5 (1 is highest priority) for conflict resolution

### Body

- Context: Usage conditions
- Requirements: Actionable items
- Examples: Both valid and invalid
- Critical Points: Key rules to follow

## Description Structure
For effective conditional activation, use:
- Format: "ACTION when TRIGGER to OUTCOME"
- ACTION: Imperative verb (ALWAYS USE, VERIFY, APPLY...)
- TRIGGER: Precise context (CREATION, WRITING...)
- OUTCOME: Expected benefit (ENSURE, GUARANTEE...)

Examples:
- "ALWAYS USE when CREATING JavaScript files to ENSURE consistency"
- "VERIFY before COMMIT to PREVENT quality issues"

## Formatting Guidelines
- Use Concise Markdown Tailored to Agent Context Window usage
- XML tags limited to:
  - <example>
  - <danger>
  - <required>
  - <rules>
  - <rule>
  - <critical>
- For Rule Content - focus on actionable, clear directives without unnecessary explanation
- Indent content within XML tags by 2 spaces
- Keep rules as short as possbile
- Use Mermaid syntax if it will be shorter or clearer than describing a complex rule
- Use Emojis where appropriate to convey meaning that will improve rule understanding by the AI Agent
- Keep examples as short as possible to clearly convey the positive or negative example
- While there is no strict line limit, be judicious with content length as it impacts performance. Focus on essential information that helps the agent make decisions

## Critical Rules
- Rule files will be located and named ALWAYS as: `.cursor/rules/{XXX}-rule-name-{auto|agent|manual|always}.mdc`
- Rules will NEVER be created anywhere other than .cursor/rules/**
- You will always check to see if there is an existing rule to update under .cursor/rules
- FrontMatter Rules Types:
  - The front matter section must always start the file and include all 3 fields, even if the field value will be blank - the types are:
    - Manual Rule: IF a Manual rule is requested - description and globs MUST be blank and alwaysApply: false and filename ends with -manual.mdc.
    - Auto Rule: IF a rule is requested that should apply always to certain glob patterns (example all typescript files or all markdown files) - description must be blank, and alwaysApply: false and filename ends with -auto.mdc.
    - Always Rule: Global Rule applies to every chat and cmd/ctrl-k - globs blank, and alwaysApply: true  and filename ends with -always.mdc.
    - Agent Select Rule: The rule does not need to be loaded into every chat thread, it serves a specific purpose. The description MUST provide comprehensive context about when to apply the rule, including scenarios like code changes, architecture decisions, bug fixes, or new file creation. Globs blank, and alwaysApply:false and filename ends with -agent.mdc
- When a rule will only be used sometimes (alwaysApply: false) the description MUST provide enough context for the AI to confidently determine when to load and apply the rule
- Always include a valid and invalid example
- NEVER use quotes around glob patterns, NEVER group glob extensions with `{}`
- CRITICAL: For Agent Select Rules, NEVER leave the description field empty. ALWAYS provide a properly formatted description using the ACTION-TRIGGER-OUTCOME format. An empty or incorrectly formatted description will prevent proper rule activation.
- ALWAYS verify that the description field has been properly updated by checking the file after creation or modification
- After rule is created or updated, Respond with the following:
  - Rule {Created or Updated}: path/rule-name.mdc
  - Rule Type: {Rule Type}
  - Rule Description: {The exact content of the description field}
