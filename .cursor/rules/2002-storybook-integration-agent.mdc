---
description: IMPLEMENT when INTEGRATING Storybook in monorepo to ENSURE component documentation and testing
globs:
alwaysApply: false
---
# Storybook Integration Best Practices for Monorepos

## Context
- When integrating Storybook in a monorepo using a dedicated package (e.g., @sparkle/storybook)
- When documenting and developing UI components with Storybook, Vite, React, and Tailwind CSS
- When ensuring consistent, maintainable, and accessible component documentation across packages

## Requirements
- Use a dedicated Storybook package for centralized UI documentation (e.g., packages/storybook)
- Configure Storybook with Vite builder and React framework (see .storybook/main.ts)
- Integrate Tailwind CSS using a shared config if present (see tailwind.config.ts)
- Auto-discover stories from all relevant packages using glob patterns (e.g., '../src/**/*.stories.@(js|jsx|ts|tsx)')
- Use Storybook addons for docs, controls, accessibility, and interactions
- Write stories with comprehensive documentation, controls, and accessibility info
- Ensure Turborepo pipeline includes Storybook build and dev scripts

## Examples
<example>
Dedicated Storybook package setup:
```json
// packages/storybook/package.json
{
  "scripts": {
    "dev": "storybook dev -p 6006",
    "build": "storybook build",
    "preview": "serve storybook-static"
  }
}
```

Storybook config with Vite, React, and Tailwind:
```ts
// packages/storybook/.storybook/main.ts
import type {StorybookConfig} from '@storybook/react-vite'
import {mergeConfig} from 'vite'

const config: StorybookConfig = {
  stories: ['../src/**/*.stories.@(js|jsx|ts|tsx)'],
  addons: [
    '@storybook/addon-links',
    '@storybook/addon-essentials',
    '@storybook/addon-onboarding',
    '@storybook/addon-interactions',
  ],
  framework: {
    name: '@storybook/react-vite',
    options: {},
  },
  core: {
    builder: '@storybook/builder-vite',
    disableTelemetry: true,
  },
  viteFinal: async config => mergeConfig(config, { build: { sourcemap: true } }),
}
export default config
```

Tailwind config for Storybook:
```ts
// packages/storybook/tailwind.config.ts
export default {
  content: [
    './src/**/*.{js,ts,jsx,tsx,mdx}',
    './.storybook/**/*.{js,ts,jsx,tsx,mdx}',
    '../**/src/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: { extend: {} },
  plugins: [],
}
```

Well-documented story:
```tsx
import type {Meta, StoryObj} from '@storybook/react'
import {Button} from './Button'

const meta = {
  title: 'Components/Button',
  component: Button,
  parameters: { layout: 'centered' },
} satisfies Meta<typeof Button>
export default meta

type Story = StoryObj<typeof meta>
export const Primary: Story = { args: { children: 'Primary' } }
```
</example>

<example type="invalid">
Missing Vite builder and Tailwind integration:
```js
// .storybook/main.js
module.exports = {
  stories: ['../src/**/*.stories.tsx'],
  // Missing Vite builder and Tailwind config
}
```

Stories without documentation or controls:
```tsx
import {Button} from './Button'
export const Primary = () => <Button>Button</Button>
```
</example>

## Critical Points
<critical>
  - ALWAYS use a dedicated package for Storybook in monorepos
  - ALWAYS configure Storybook with Vite builder, React, and Tailwind CSS
  - ENSURE auto-discovery of stories from all relevant packages
  - ENFORCE best practices for documentation, controls, and accessibility in stories
  - INCLUDE Storybook build and dev scripts in the Turborepo pipeline
</critical>
